   !   轻微
  !!   一般优先级      - 正在进行中             [bug] Bug               
 !!!   重要优先级      o 待执行                 [req] Requirement       
!!!!   紧迫优先级      x 已经完成               [opt] Optimize
                                                [tst] Test
                                                [ref] refactor
                                                [doc] Document
                                                [fil] File
                                                [fuc] Function

{id} 事项ID，按照按照添加时间顺序排列   
    vim命令自动传入当前buffer最大事项ID : `:VimioTodoId`
    vim命令查看当前 todo.txt 的大纲     : `:VimioTodoSummary`



- [fil]{0012}(!!!!) todo.vim
    o [req]{0013}(    ) 增加一个功能更新父节点的优先级，取缩进的子节点中的最高优先级。普通模式下操作即可。
                        并且要根据下面的子节点的任务完成情况(- o x)的情况更新标头。
                        父节点的优先级和状态不应该手动更新，都应该由子节点的状态来决定
    o [req]{0028}(    ) `highlight` 高亮功能
                        类似于这样的反引号包裹的字符串在文本中高亮显示出来
    o [req]{0029}(    ) `todo.vim` 独立成一个独立的插件，不要包含在 `vimio` 插件中。
    o [req]{0030}(    ) 超链接和锚点
                        当前 `todo.txt` 中可以标记锚点，让可以方便跳转。超链接标记用于跳转到锚点。
                        当前节点的 `Id` 为天然的双向锚点。可以在文本中循环跳转。跳转后更新 `vim` 的位置列表，这样可以方
                        便跳回。
    o [req]{0042}(    ) 增加一个功能，当用户使用 `VimioTodoId` 插入一个节点 `Id` 的时候，自动在文件的末尾的区域插入这个
                        Id 生成的时间节点。甚至可以补充一些 `备忘` 信息之类的。
    o [req]{0044}(    ) 使用 <{}> 标记的内容是一个超级链接，支持使用 `vim` 直接打开浏览器。具体的 `tag` 格式可以再决定。
    - [bug]{0045}(!!!!) 当前的高亮 `Id` 的管理有问题，频繁触发BUG。
    o [req]{0048}(    ) 使用一种特殊的方法，文件后缀？来识别我们的格式的文件，然后增加可以折叠已经完成的项目的功能。
                        (标 x 的项目，也可以显示它们，用户可以切换)

- [fil]{0011}(!!!!) replace.vim
    - [fuc]{0014}(!!!!) vimio#replace#paste_block_clip
        - [bug]{0003}(!!!!) 如果覆盖层的右边界恰好在被覆盖的文本的某个双宽字符的左半槽上面，覆盖后会少一个空格，导致整体
                            内容左移，英文覆盖中文的情况下也是错乱的。


- [fil]{0015}(!!!!) debug.vim
    - [fuc]{0016}(   !) vimio#debug#pretty_print
        - [req]{0001}(   !) 打印出来的键并没有顺序，不便于问题定位   
    - [req]{0002}(!!!!) 可以做一个两个对象的对比功能，先把两个嵌套的对象都树状打印字符串化，然后对比两个数据结构的具体差
                        异，并且清晰显示出来

x [fil]{0017}(    ) cursors.vim
    x [fuc]{0018}(    ) vimio#cursor#vhl_add_points_and_apply
        x [bug]{0004}(    ) 某些情况下上报，找不到 ID: 1536 之类的。
                            原因：在A buffer生成了高亮，没有清理。然后在B buffer执行高亮。

o [fil]{0019}(   !) box.vim
    o [req]{0005}(   !) 高亮选择边框后改变边框类型的功能。可以使用一个快捷键进行周期性切换，减少快捷键的数量。
                        高亮选择后批量替换对应的框字符为需要切换的系列(ASCII/unicode/unicode bold ...)。也可以按照路径绘
                        制，这样可以自动处理交叉处的字符。暴力替换字符是没有办法处理交叉点字符。
                        需要切换的字符集由光标处的字符的字符集类型决定。

    o [req]{0038}(    ) 插入矩形可以支持交叉字符，在未插入前我们就可以预览生成交叉字符的效果图。
                        (可能性能很低，因为要知道确切的交叉字符，只能基于线条绕行的绘制。)，待用户插入的时候，直接使用
                        overlay覆盖粘贴即可。
    o [req]{0039}(    ) 识别光标下的矩形盒子边框，并且让它智能的变大和缩小。


o [fil]{0020}( !!!) line.vim
    o [req]{0007}( !!!) 智能线绘制   
                            1.  使用高亮指定一个绘线的起点，然后根据当前光标的位置，基于起点，生成一个线的预览弹窗。
                            2.  线可以是只有直角的线段，也可以包含斜线和直线混合的线段，增加一个操作来在预览的情况下动态
                                切换当前是直角线段还是包含斜线的线段。
                            3.  线在路径中如果遇到了边界字符，需要基于基本的交叉规则正确在预览弹窗中生成正确的交叉字符。
                                交叉的生成基于起点到终点的线条绕行规则(效率是个大问题，可能需要优化算法)
                            4.  智能线的类型和当前的普通线一致。
                            5.  按下结束键后当前线绘制完成。
                            6.  增加连续绘线功能，在终端处按下停止键后自动把以前的起点的高亮取消，并且把当前的终点标记高
                                亮成为新的起点，然后继续绘制下一条下。直到按下整体完成键。
                            7.  关于直线和斜线的路由规则算法可以参考 Asciio。各种方向根据当前光标移动路径动态决定。
    o [req]{0008}(  !!) 高亮选择线后改变线的类型功能，和 {0005} 功能相似。
    o [req]{0040}(    ) 智能识别当前光标下的线条，让它消失并且修复交叉点的字符。然后基于用户的操作用预览弹窗模拟移动，到
                        达终点后重新绕行。(难点在于修复交叉点的字符。)

o [fil]{0021}(   !) vimio.txt
    o [doc]{0006}(   !) 智能选择模式的所有操作详细说明。


o [fil]{0022}(   !) cursors.vim
    o [bug]{0009}(   !) 如果当前光标在虚拟编辑模式下的不存在空格的位置，无法进行高亮。影响我们后面的新特性智能线起点标记
                        功能。

o [fil]{0023}(   !) draw.vim
    o [bug]{0010}(!!!!) 横向和纵向绘线，对于起点的前面一个点不应该进行交叉字符的判断和改变，始终应该保持它自己，不应该做
                        特殊处理。
                        |               |               |
                        |A    B         .------         |------
                        |               |               |

                        A  to  B        wrong           right

                        如果想生成 wrong 处那样的图形，起点应该是下面这样
                        |      
                        A     B
                        |      

o [fil]{0025}(  !!) select.vim
    o [req]{0026}(  !!) 所有的基于fill-flood算法和环算法的快捷选择算法的反向选择功能。
    o [bug]{0031}(  !!) A是行末点，执行 vimio#select#line_select 出现错误，将列表作字符串使用
                        |
                        | .----.-------.                        
                        | |    |       |                        
                        | |    |       '--------------.        A
                        | '----'-------'              |        |
                        |                             |        |
                        |                             |        |
                        | .----.-------.              |        |
                        | |    |       |              |        v
                        | |    |       '--------------+---------
                        | '----'-------'                        
    o [ref]{0032}(    ) 目前取最大环(vimio#select#highlight_inside_border)效率极其低下，可以考虑用
                        vimio#select#extract_all_closed_loops 找到所有闭合环，然后筛选出经过当前点
                        的，然后再从里面筛选出路径最长的环。
    x [req]{0049}(    ) 增加一个实心块文本选择模式，排除所有的交点字符，选择纯文本。

o [ref]{0024}(   !) 所有的代码中哪些函数变量应该是全局哪些应该是局部，还有变量管理要清理一遍。
o [ref]{0027}(   !) 所有的函数都应该加 `abort` 标签。
o [req]{0033}(    ) 镜像功能。指定需要镜像的高亮区域，指定镜像轴，可以是水平或者垂直或者旋转。指定每个绘图字符对应的镜像
                    字符。
o [ref]{0034}(    ) 当前单字符的行获取还是用的正则高效版本，如果字符集超出范围可能有BUG。后续可以考虑采用
                    strdisplaywidth 版本(不考虑长行性能问题)
o [doc]{0035}(    ) 写一个 `for_develep` 的文档

o [fil]{0036}(    ) basic.vim
    o [req]{0037}(    ) basic.vim 增加各种矩形盒子，以便用户方便插入。还有其它常见的盒子(*和oO等等)。然后字符集也需要同
                        步更新
o [req]{0041}(    ) 图形集的预览的功能的增强，支持剪切板的历史记录回滚功能。可以考虑在屏幕的固定位置显示多一些图形预览的
                    一部分(防止某些图形过大占用屏幕空间)。让用户可以快速选择。
                    历史记录需要限制数量，不能导致内存无限占用
                    剪切板分两类:
                        1. 模板类的，基于 `draw_shpes` 目录下的图形的缓存。
                        2. 除开模板中的形状的用户自己拷贝的形状的缓存。
o [req]{0043}(    ) 这里有一种特殊的商用字体 `https://github.com/fabrizioschiavi/pragmatapro` (可惜是商用字体，无法开源
                    使用)。这个字体的神奇之处是它的自定义区域有很多绘图字符，可以让斜线和直线连接无空隙。可以考虑通过这
                    种字体可以设计超级交叉模式，可以绘制更加美观的待斜线的图形(支持8个方向的交叉字符)。

o [tst]{0046}(    ) 终端 `vim` 下的全量验证。
o [req]{0047}(    ) 对 `neovim` 的支持考虑。

